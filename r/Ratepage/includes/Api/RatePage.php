<?php

namespace RatePage\Api;

use ApiBase;
use MediaWiki\MediaWikiServices;
use RatePage\Rating;
use Title;
use Wikimedia\ParamValidator\ParamValidator;

/**
 * API for getting the page rating and voting for pages
 *
 * @file
 * @ingroup Extensions
 */
class RatePage extends ApiBase {
	use RatePageApiTrait;

	public function execute() {
		$params = $this->extractRequestParams();
		$this->requireOnlyOneParameter(
			$params,
			'pageid',
			'pagetitle'
		);

		if ( isset( $params['pageid'] ) ) {
			$title = Title::newFromID( $params['pageid'] );
		} else {
			$title = Title::newFromText( $params['pagetitle'] );
		}

		if ( is_null( $title ) || $title->getArticleID() < 1 ) {
			$this->dieWithError(
				'apierror-ratepage-page-not-exists',
				'pagenotexists'
			);
		}

		$this->getResult()->addValue(
			null,
			"pageId",
			$title->getArticleID()
		);

		$this->processParams(
			$params,
			$this->getContext(),
			$this
		);

		if ( !$this->contestId && !Rating::canPageBeRated( $title ) ) {
			return;
		}

		$config = MediaWikiServices::getInstance()->getMainConfig();
		$ratingMin = $config->get( 'RPRatingMin' );
		$ratingMax = $config->get( 'RPRatingMax' );

		if ( isset( $params['answer'] ) ) {
			if ( !$this->permissions['vote'] ) {
				$this->dieWithError(
					'apierror-ratepage-cannot-vote-in-contest',
					'cannotvoteincontest'
				);
			}

			if ( $this->user->pingLimiter( 'ratepage' ) ) {
				$this->dieWithError( 'apierror-ratelimited' );
			}

			$answer = $params['answer'];
			if ( $answer < $ratingMin || $answer > $ratingMax ) {
				$this->dieWithError(
					[ 'apierror-ratepage-invalid-answer', $ratingMin, $ratingMax ],
					'invalidanswer'
				);
			}
			Rating::voteOnPage(
				$title,
				$this->userName,
				$this->ip,
				$answer,
				$this->contestId
			);
		}

		$this->addTitleToResults(
			$title,
			null,
			$this->getResult()
		);
	}

	/**
	 * Get the cache mode for the data generated by this module
	 *
	 * @param array $params Ignored parameters
	 *
	 * @return string Always returns "private"
	 */
	public function getCacheMode( array $params ) : string {
		return 'private';
	}

	/**
	 * Return an array describing all possible parameters to this module
	 *
	 * @return array
	 */
	public function getAllowedParams() : array {
		return [
			'pageid' => [ ParamValidator::PARAM_TYPE => 'integer' ],
			'pagetitle' => [ ParamValidator::PARAM_TYPE => 'string' ],
			'answer' => [ ParamValidator::PARAM_TYPE => 'integer' ],
			'contest' => [ ParamValidator::PARAM_TYPE => 'string' ]
		];
	}

	/**
	 * @inheritDoc
	 */
	protected function getExamplesMessages() : array {
		return [
			'action=ratepage&pagetitle=Example' => 'apihelp-ratepage-example-1',
			'action=ratepage&pagetitle=Example&answer=2' => 'apihelp-ratepage-example-2'
		];
	}

	public function isWriteMode() : bool {
		return true;
	}

	public function needsToken() : string {
		return 'csrf';
	}

	public function mustBePosted() : bool {
		return true;
	}
}
