// Common Less mixin library for Codex.
// Featuring mixins, that are not component or component group specific.

/* stylelint-disable selector-class-pattern */

// Support Webkit/Blink: Force element on own GPU composite layer
// Can be used in order to help establish smooth, jank-free scrolling in
// connection with CSS animations or tame `opacity` bug. Use sparingly & wisely!
// See T154460 & T182257.
.force-gpu-composite-layer() {
	-webkit-transform: translateZ( 0 );
	transform: translateZ( 0 );
}

// CSS3 hyphenation
// It is advisable to set the `lang` attribute on the HTML element to enable hyphenation support.
.hyphens( @param-value: auto ) {
	& when ( @param-value = auto ) {
		// Legacy `word-wrap`; IE 6-11, Edge 12+, Firefox 3.5+, Chrome 4+, Safari 3.1+,
		//   Opera 11.5+, iOS 3.2+, Android 2.1+
		// `overflow-wrap` is W3 standard, but it doesn't seem as if browser vendors
		//   will abandon `word-wrap` (it has wider support), therefore no duplication.
		word-wrap: break-word;
	}

	& when ( @param-value = none ) {
		word-wrap: normal;
	}

	// Chrome < 55 and Android 4.0 Browser support `-webkit-hyphens: none`,
	// but not the `auto` value.
	// Chrome 55-87 only supports `auto` exclusively on Mac platform.
	/* stylelint-disable-next-line plugin/no-unsupported-browser-features */
	hyphens: @param-value;
}

// Truncate overflow text with value of `ellipsis` (mixin default),
// a custom string (Firefox 9+ only) or show.
// Recommended usage: `.text-overflow( @param-visible: false )` for best readability.
.text-overflow( @param-visible: false, @param-value: ellipsis ) {
	& when ( @param-visible = true ) {
		overflow: visible;
		text-overflow: clip;
		white-space: normal;
	}
	& when ( @param-visible = false ) {
		// Hide overflowing text.
		overflow: hidden;
		// Use an ellipsis or a custom string to indicate text overflow.
		text-overflow: @param-value;
		// Force overflow of the description text.
		white-space: nowrap;
	}
}

// Screen Reader Helper Mixin for visually hidden text.
.screen-reader-text() {
	display: block;
	clip: rect( @size-absolute-1, @size-absolute-1, @size-absolute-1, @size-absolute-1 );
	/* stylelint-disable-next-line declaration-no-important */
	position: absolute !important;
	width: @size-absolute-1;
	height: @size-absolute-1;
	// Use negative `@size` token here as they are inherently connected.
	margin: -@size-absolute-1;
	border: 0;
	padding: 0;
	overflow: hidden;
}

/* stylelint-enable selector-class-pattern */
