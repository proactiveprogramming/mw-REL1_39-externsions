<?php

namespace RatePage\Api;
use ApiQuery;
use ApiQueryBase;
use RatePage\Rating;
use Wikimedia\ParamValidator\ParamValidator;

class QueryPageRatingProp extends ApiQueryBase {
	use RatePageApiTrait;

	/**
	 * @inheritDoc
	 */
	public function __construct( ApiQuery $queryModule, $moduleName, $paramPrefix = 'pr' ) {
		parent::__construct(
			$queryModule,
			$moduleName,
			$paramPrefix
		);
	}

	/**
	 * @inheritDoc
	 */
	public function execute() {
		$params = $this->extractRequestParams();
		$titles = $this->getPageSet()->getGoodTitles();
		$this->processParams(
			$params,
			$this->getContext(),
			$this
		);
		$result = $this->getResult();

		foreach ( $titles as $title ) {
			if ( !$this->contestId && !Rating::canPageBeRated( $title ) ) {
				continue;
			}

			$path = [
				'query',
				'pages',
				$title->getArticleID(),
				$this->getModuleName()
			];
			$this->addTitleToResults(
				$title,
				$path,
				$result
			);
		}
	}

	/**
	 * Get the cache mode for the data generated by this module
	 *
	 * @param array $params Ignored parameters
	 *
	 * @return string Always returns "private"
	 */
	public function getCacheMode( $params ) : string {
		return 'private';
	}

	/**
	 * Return an array describing all possible parameters to this module
	 *
	 * @return array
	 */
	public function getAllowedParams() : array {
		return [ 'contest' => [ ParamValidator::PARAM_TYPE => 'string' ] ];
	}
}
